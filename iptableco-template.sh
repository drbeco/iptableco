#!/bin/bash
# By DrBeco 2016-05-26, 2021-07-17, 2024-03-24, 2024-04-03

VERSION="20240404.005802"
DDATE=$(date +"%Y%m%d%H%M%S")
SAVE=0
if [ "$1" == "-s" ]; then
    FILEN=$DDATE-iptables-main-up.rules
    FILED=$DDATE-iptables-add-up.rules
    echo "Saving to files:"
    echo "               -  $FILEN"
    echo "               -  $FILED"
    echo
    echo "Usage:"
    echo '       * stop here any services that messes iptables up *'
    echo "       Example: /etc/rc.d/rc.docker stop"
    echo
    echo "       /etc/rc.d/rc.iptableco restore $FILEN"
    echo
    echo '       * start here any services that messes iptables up *'
    echo "       Example: /etc/rc.d/rc.docker start"
    echo
    echo "       /etc/rc.d/rc.iptableco add $FILED"
    SAVE=1
fi

###########################################################################
# Globals

PUBIF="eth0"
# PUBIF="tun0"
DOCKERI="docker0"
PONG="echo-reply" # type 0
PING="echo-request" # type 8, echo
GATEWAY="192.168.1.1" # Gateway
MAINIP="192.168.1.34" # ssh maintainer
EPSONL3250="192.168.1.15" # EPSON L3250 PRINTER
CHROMECAST="192.168.1.21" #Google Chromecast v3

###########################################################################
# Main file - flush first
if [ "$SAVE" -eq 1 ] ; then
    exec > $FILEN
fi
echo "#iptableco.sh version $VERSION"
echo "#iptables-main-up.rules : Generated by iptableco.sh at $DDATE"

## Set maquerade chain policies
#echo '*nat'
#echo ":PREROUTING ACCEPT [0:0]"
#echo ':INPUT  ACCEPT [0:0]'
#echo ':OUTPUT ACCEPT [1:343]'
#echo ':POSTROUTING ACCEPT [0:0]'
#echo '-A POSTROUTING -s 10.7.7.0/24 -o wlan0 -j MASQUERADE'
#echo '-A POSTROUTING -s 10.7.7.0/24 -o $PUBIF  -j MASQUERADE'
#echo '-A POSTROUTING -s 10.7.7.0/24 -o ra0   -j MASQUERADE'
#echo 'COMMIT'

## Set default chain policies
echo "*filter"
echo ":INPUT  DROP [0:0]"
echo ":FORWARD DROP [0:0]"
echo ":OUTPUT DROP [0:0]"

#------------------------ Input traffic: basic

# Dropping Invalid Packets
echo "-4 -A INPUT -m conntrack --ctstate INVALID -j DROP"
echo "-6 -A INPUT -m conntrack --ctstate INVALID -j DROP"

# localhost accepts traffic comming from local
echo "-4 -A INPUT -i lo -j ACCEPT"
echo "-6 -A INPUT -i lo -j ACCEPT"

# Allow Established and Related Incoming Connections TCP/UDP
# with this rule, we only need to create rules for NEW
echo "-4 -A INPUT -i $PUBIF -p tcp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"
echo "-4 -A INPUT -i $PUBIF -p udp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"
echo "-6 -A INPUT -i $PUBIF -p tcp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"
echo "-6 -A INPUT -i $PUBIF -p udp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"

# PING from outside: allow a new ping in (server)
# echo "-4 -A INPUT -p icmp -m icmp --icmp-type $PING -m conntrack --ctstate NEW -j ACCEPT"
# PING from inside: get back the comming pong
# echo "-4 -A INPUT -p icmp -m icmp --icmp-type $PONG -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"
# PING PONG IPV4 incomming
echo "-4 -A INPUT -p icmp -j ACCEPT"
# PING PONG IPV6 incomming
echo "-6 -A INPUT -p ipv6-icmp -j ACCEPT"

#------------------------ Input traffic: services

# SSH allow incomming: accepts new connections from outside (SSH server)
echo "-4 -A INPUT -i $PUBIF -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# SSH IPV6 allow incomming: accepts new connections from outside (SSH server)
echo "-6 -A INPUT -i $PUBIF -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# SSH communicates back to the world
#echo "-4 -A INPUT -i $PUBIF -p tcp -m tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT"
# SSH allow incomming: accepts new connections from outside (SSH server)
# echo "-4 -A INPUT -i $PUBIF -p tcp -m tcp --dport 2222 -m state --state NEW,ESTABLISHED -j ACCEPT"
# SSH communicates back to the world
# echo "-4 -A INPUT -i $PUBIF -p tcp -m tcp --sport 2222 -m state --state ESTABLISHED -j ACCEPT"

# DNS allow outbound: we can get back the IP of a domain
echo "-4 -A INPUT -i $PUBIF -p udp -m udp --dport 53 -j ACCEPT"
echo "-4 -A INPUT -i $PUBIF -p tcp -m tcp --dport 53 -j ACCEPT"
echo "-6 -A INPUT -i $PUBIF -p udp -m udp --dport 53 -j ACCEPT"
echo "-6 -A INPUT -i $PUBIF -p tcp -m tcp --dport 53 -j ACCEPT"

# SSL HTTPS can communicate back
#echo "-4 -A INPUT -i $PUBIF -p tcp -m tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT"
# SSL HTTPS allow incomming: accepts new connections from outside (HTTPS server)
echo "-4 -A INPUT -i $PUBIF -p tcp -m tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT"
echo "-4 -A INPUT -i $PUBIF -p udp -m udp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A INPUT -i $PUBIF -p tcp -m tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A INPUT -i $PUBIF -p udp -m udp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT"

# HTTP allow incomming: accepts new connections from outside (HTTP server)
echo "-4 -A INPUT -i $PUBIF -p tcp -m tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT"
echo "-4 -A INPUT -i $PUBIF -p udp -m udp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A INPUT -i $PUBIF -p tcp -m tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A INPUT -i $PUBIF -p udp -m udp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT"
# HTTP can communicate back
#echo "-4 -A INPUT -i $PUBIF -p tcp -m tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT"

# NTP server, we get back the time (we are client)
echo "-4 -A INPUT -p udp -m udp --sport 123 -j ACCEPT"

# SMTP mail server - accept incomming connections from outside world to receive emails
#echo "-4 -A INPUT -p tcp --dport 25 -j ACCEPT"   # old smtp
#echo "-4 -A INPUT -p tcp --dport 587 -j ACCEPT"  # default submission port
#echo "-4 -A INPUT -p tcp --dport 587 -j ACCEPT"  # default submission port
#echo "-4 -A INPUT -p tcp --dport 465 -j ACCEPT"
#echo "-6 -A INPUT -p tcp --dport 465 -j ACCEPT"
# POP mail server
#echo "-4 -A INPUT -p tcp --dport 995 -j ACCEPT"
#echo "-6 -A INPUT -p tcp --dport 995 -j ACCEPT"

# GOPHER protocol accept incomming connections from outside world to check gopher
# echo "-4 -A INPUT -p tcp --dport 70 -j ACCEPT"

# DHCP DPT=67, SPT=68
echo "-4 -A INPUT -i $PUBIF -p udp --dport 67 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A INPUT -i $PUBIF -p udp --dport 67 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# RSYNC allow new connections for backup IPV4
echo "-4 -A INPUT -i $PUBIF -p tcp -s $MAINIP --dport 873 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
echo "-4 -A INPUT -i $PUBIF -p tcp -s $GATEWAY --dport 873 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-6 -A INPUT -i $PUBIF -p tcp --dport 873 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# SNMP simple network management protocol - EPSON printer
# echo "-4 -A INPUT -i $PUBIF -s $EPSONL3250 -p udp --sport 161 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# Google Meet
# echo "-4 -A INPUT -i $PUBIF -p tcp -m multiport --dports 19302:19309 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-4 -A INPUT -i $PUBIF -p udp -m multiport --dports 19302:19309 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-4 -A INPUT -i $PUBIF -p tcp -s 74.125.250.0/24 -j ACCEPT"
# echo "-4 -A INPUT -i $PUBIF -p udp -s 74.125.250.0/24 -j ACCEPT"
# echo "-4 -A INPUT -i $PUBIF -p tcp -s 142.250.82.0/24 -j ACCEPT"
# echo "-4 -A INPUT -i $PUBIF -p udp -s 142.250.82.0/24 -j ACCEPT"
# Google Meet IPV6
# echo "-6 -A INPUT -i $PUBIF -p tcp -m multiport --dports 19302:19309 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-6 -A INPUT -i $PUBIF -p udp -m multiport --dports 19302:19309 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# Ignore Dropbox LAN Sync broadcasts
# echo "-4 -A INPUT -p udp -m udp --dport 17500 -j DROP"

# MariaDB
# echo "-4 -A INPUT -i $PUBIF -p tcp --dport 3306 -j ACCEPT"
# echo "-6 -A INPUT -i $PUBIF -p tcp --dport 3306 -j ACCEPT"

# Google Chromecast and SAMSUNG TV Inbound
# echo "-4 -A INPUT -i ${PUBIF} -p udp -s ${CHROMECAST} -m multiport --sports 32768:61000 -m multiport --dports 32768:61000 -m comment --comment \"Allow Chromecast UDP data (inbound)\" -j ACCEPT"
# echo "-4 -A INPUT -i ${PUBIF} -p udp -d 224.0.0.251 --sport 5353 --dport 5353 -m comment --comment \"Allow Chromecast UDP DNS data (inbound)\" -j ACCEPT"

# KTorrent 8881 6881
#echo "-4 -A INPUT -i ${PUBIF} -p tcp -m tcp --dport 6881 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

#------------------------ Output traffic: basic

# Dropping Invalid Packats
echo "-4 -A OUTPUT -m conntrack --ctstate INVALID -j DROP"
echo "-6 -A OUTPUT -m conntrack --ctstate INVALID -j DROP"

# local can send traffic to local
echo "-4 -A OUTPUT -o lo -j ACCEPT"
echo "-6 -A OUTPUT -o lo -j ACCEPT"

# Allow Established and Related Outgoing Connections TCP/UDP
# with this rule, we only need to create rules for NEW
echo "-4 -A OUTPUT -o $PUBIF -p tcp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"
echo "-4 -A OUTPUT -o $PUBIF -p udp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"
echo "-6 -A OUTPUT -o $PUBIF -p tcp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"
echo "-6 -A OUTPUT -o $PUBIF -p udp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"

# Allow NEW output (mainly for FTP, but policy OUTPUT Allow new for these ports):
# echo "-4 -A OUTPUT -o $PUBIF -p tcp -m multiport --dports 33000:64000 -j ACCEPT"

# PING from inside: send new ping
# echo "-4 -A OUTPUT -p icmp -m icmp --icmp-type $PING -m conntrack --ctstate NEW -j ACCEPT"
# PING from outside: give back a pong (server)
# echo "-4 -A OUTPUT -p icmp -m icmp --icmp-type $PONG -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"
# PING PONG IPV4 outgoing
echo "-4 -A OUTPUT -p icmp -j ACCEPT"
# PING PONG IPV6 outgoing
echo "-6 -A OUTPUT -p ipv6-icmp -j ACCEPT"

#------------------------ Output traffic: services

# SSH we can ask for new connections to the world
echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# SSH IPV6 we can ask for new connections to the world
echo "-6 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# SSH allow incomming: answer back connections from outside (SSH server)
#echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT"
# SSH allow incomming: answer back connections from outside (SSH server)
# echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --sport 2222 -m state --state ESTABLISHED -j ACCEPT"
# SSH we can ask for new connections to the world
# echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 2222 -m state --state NEW,ESTABLISHED -j ACCEPT"

# DNS allow outbound: we can ask the IP of a domain
echo "-4 -A OUTPUT -o $PUBIF -p udp -m udp --dport 53 -j ACCEPT"
echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 53 -j ACCEPT"
echo "-6 -A OUTPUT -o $PUBIF -p udp -m udp --dport 53 -j ACCEPT"
echo "-6 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 53 -j ACCEPT"

# SSL HTTPS can ask for new connections to the world and run slackpkg update for example
echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT"
echo "-4 -A OUTPUT -o $PUBIF -p udp -m udp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A OUTPUT -o $PUBIF -p udp -m udp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT"
# SSL HTTPS allow incomming: we answer back connections (HTTPS server)

# HTTP can ask for new connections to the world
echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
echo "-4 -A OUTPUT -o $PUBIF -p udp -m udp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A OUTPUT -o $PUBIF -p udp -m udp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# HTTP allow incomming: we answer back connections (HTTP server)
#echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT"

# WHOIS protocol - allow output for query
echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 43 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# NTP server, we can ask the time (we are client)
echo "-4 -A OUTPUT -p udp -m udp --dport 123 -j ACCEPT"

# SMTP mail server - accept outgoing connections to send emails to outside
# echo "-4 -A OUTPUT -p tcp --dport 25 -j ACCEPT"
# echo "-4 -A OUTPUT -p tcp --dport 465 -j ACCEPT"
# echo "-6 -A OUTPUT -p tcp --dport 465 -j ACCEPT"
# echo "-4 -A OUTPUT -p tcp --dport 587 -j ACCEPT"
# echo "-6 -A OUTPUT -p tcp --dport 587 -j ACCEPT"
# POP mail server
# echo "-4 -A OUTPUT -o $PUBIF -p tcp --dport 995 -j ACCEPT"
# echo "-6 -A OUTPUT -o $PUBIF -p tcp --dport 995 -j ACCEPT"

# GOPHER protocol accept outgoing  connections from outside world to check gopher
# echo "-4 -A OUTPUT -p tcp --dport 70 -j ACCEPT"
# port 113 service IDENT (for gopher and others)
# echo "-4 -A OUTPUT -p tcp --dport 113 -j ACCEPT"

# DHCP DPT=67, SPT=68
echo "-4 -A OUTPUT -o $PUBIF -p udp --dport 67 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A OUTPUT -o $PUBIF -p udp --dport 67 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# RSYNC allow server to establish connections to the outside world
echo "-4 -A OUTPUT -o $PUBIF -p tcp --dport 873 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
echo "-6 -A OUTPUT -o $PUBIF -p tcp --dport 873 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# SNMP simple network management protocol - EPSON printer
# echo "-4 -A OUTPUT -o $PUBIF -s $MAINIP -p udp --dport 161 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-4 -A OUTPUT -o $PUBIF -d $EPSONL3250 -p tcp --dport 515 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-4 -A OUTPUT -o $PUBIF -d $EPSONL3250 -p tcp --dport 631 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# GPG keys
echo "-4 -A OUTPUT -o $PUBIF -p tcp --dport 11371 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# Google Meet
# echo "-4 -A OUTPUT -o $PUBIF -p tcp -m multiport --dports 19302:19309 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-4 -A OUTPUT -o $PUBIF -p udp -m multiport --dports 19302:19309 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-4 -A OUTPUT -o $PUBIF -p tcp -d 74.125.250.0/24 -j ACCEPT"
# echo "-4 -A OUTPUT -o $PUBIF -p udp -d 74.125.250.0/24 -j ACCEPT"
# echo "-4 -A OUTPUT -o $PUBIF -p tcp -d 142.250.82.0/24 -j ACCEPT"
# echo "-4 -A OUTPUT -o $PUBIF -p udp -d 142.250.82.0/24 -j ACCEPT"
# echo "-6 -A OUTPUT -o $PUBIF -p tcp -m multiport --dports 19302:19309 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-6 -A OUTPUT -o $PUBIF -p udp -m multiport --dports 19302:19309 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-6 -A OUTPUT -o $PUBIF -p tcp -d 2001:4860:4864:5::0/64 -j ACCEPT"
# echo "-6 -A OUTPUT -o $PUBIF -p udp -d 2001:4860:4864:5::0/64 -j ACCEPT"
# echo "-6 -A OUTPUT -o $PUBIF -p tcp -d 2001:4860:4864:6::/64 -j ACCEPT"
# echo "-6 -A OUTPUT -o $PUBIF -p udp -d 2001:4860:4864:6::/64 -j ACCEPT"

# telegram video conferency
# echo "-4 -A OUTPUT -o $PUBIF -p udp -d 91.108.13.0/24 -m multiport --dports 32000:32003 -j ACCEPT"
# echo "-4 -A OUTPUT -o $PUBIF -p udp -d 91.108.9.0/24 -m multiport --dports 1400,599 -j ACCEPT"

# MariaDB
# echo "-4 -A OUTPUT -o $PUBIF -p tcp --dport 3306 -j ACCEPT"
# echo "-6 -A OUTPUT -o $PUBIF -p tcp --dport 3306 -j ACCEPT"

# Internet Speet test speedtest.net
# echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 8080 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-6 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 8080 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# Entrega declaracao IRPF (abrir ambas)
# echo "-4 -A OUTPUT -o ${PUBIF} -p tcp -m tcp -d 161.148.0.0/16 --dport 3456 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# echo "-4 -A OUTPUT -o ${PUBIF} -p tcp -m tcp -d 189.9.0.0/16 --dport 3456 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
# DST=189.9.71.11 e 200.198.239.0/24

# Google Chromecast and SAMSUNG TV Outbound
# echo "-4 -A OUTPUT -p udp -o ${PUBIF} -d ${CHROMECAST} -m multiport --sports 32768:61000 -m multiport --dports 32768:61000 -m comment --comment \"Allow Chromecast UDP data (outbound)\" -j ACCEPT"
# echo "-4 -A OUTPUT -p tcp -o ${PUBIF} -d ${CHROMECAST} -m multiport --dports 8008:8009 -m comment --comment \"Allow Chromecast TCP data (outbound)\" -j ACCEPT"
# echo "-4 -A OUTPUT -p udp -o ${PUBIF} -d 224.0.0.251 --sport 5353 --dport 5353 -m comment --comment \"Allow Chromecast UDP DNS data (outbound)\" -j ACCEPT"
# echo "-4 -A OUTPUT -p udp -o ${PUBIF} -d 239.255.255.250/32 --dport 1900 -m comment --comment \"Allow Chromecast SSDP call home (outbound)\" -j ACCEPT"
# echo "-4 -A OUTPUT -p udp -o ${PUBIF} -d ${CHROMECAST} --dport 10008 -m comment --comment \"Allow Chromecast UDP 10008 (outbound)\" -j ACCEPT"
# Ignore discover multicast -j DROP
# echo "-4 -A OUTPUT -p igmp -o ${PUBIF} -d 224.0.0.22 -m comment --comment \"Allow discover multicast (outbound igmp)\" -j ACCEPT"

# KTorrent 8881 6881
#echo "-4 -A OUTPUT -o $PUBIF -p tcp -m tcp --dport 6881 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
#echo "-4 -A OUTPUT -o ${PUBIF} -p tcp -m tcp --dport 7777 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
#echo "-4 -A OUTPUT -o $PUBIF -p udp -m udp --sport 8881 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"
#echo "-6 -A OUTPUT -o ${PUBIF} -p udp -m udp --sport 8881 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# wakeonlan port 9 output allow wake another server ; input not necessary (because server is down in this case)
# echo "-4 -A OUTPUT -o $PUBIF -s $MAINIP -p udp --dport 9 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# discord
# echo "-4 -A OUTPUT -o $PUBIF -s $MAINIP -p udp --dport 50003 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"

# Allow Epson scanner
# echo "-4 -A OUTPUT -o $PUBIF -p tcp -d 192.168.1.15 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT"


#------------------------ INPUT/OUTPUT misc

## Allow xboard FICS freechess.org 54.39.129.129 port 5001
# echo "-4 -A OUTPUT -o $PUBIF -d 54.39.129.129 -p tcp -m tcp --dport 5001 -m state --state NEW,ESTABLISHED -j ACCEPT"
# echo "-4 -A OUTPUT -o $PUBIF -d 54.39.129.129 -p tcp -m tcp --dport 5000 -m state --state NEW,ESTABLISHED -j ACCEPT"

#------------------------ DOCKER Chain

# echo "-4 -A OUTPUT -d 172.19.0.0/24 -j ACCEPT"
# echo "-4 -A OUTPUT -s 172.19.0.0/24 -j ACCEPT"
# echo "-4 -A INPUT -d 172.19.0.0/24 -j ACCEPT"
# echo "-4 -A INPUT -s 172.19.0.0/24 -j ACCEPT"


#------------------------ Logging traffic

# LOG INPUT IPV4 and IPV6
echo "-4 -A INPUT -m limit --limit 4/min -j LOG --log-prefix  "iptables-drop-input: " --log-level 5"
echo "-6 -A INPUT -m limit --limit 4/min -j LOG --log-prefix  "iptables6-drop-input: " --log-level 5"
# LOG OUTPUT IPV4 and IPV6
echo "-4 -A OUTPUT -m limit --limit 4/min -j LOG --log-prefix "iptables-drop-output: " --log-level 5"
echo "-6 -A OUTPUT -m limit --limit 4/min -j LOG --log-prefix "iptables6-drop-output: " --log-level 5"

# DROP everything else IPV4 and IPV6
echo "-4 -A INPUT -j DROP"
echo "-6 -A INPUT -j DROP"
echo "-4 -A OUTPUT -j DROP"
echo "-6 -A OUTPUT -j DROP"


# Completed on Thu, 2024-04-04 22:49:52
# Modified on 2024-04-04
echo "COMMIT"
echo "#Done "`date`

###########################################################################
# Aux file date-iptables-add-up.rules to be applied without flushing rules
if [ "$SAVE" -eq 1 ] ; then
	# saving to insert-file
    exec > $FILED
else
	# printing to standard output
	echo "# ################## $FILED - extra rules to append after restore"
fi

#------------------------ DOCKER Chain - add rules without purging first

if [ "$SAVE" -eq 0 ] ; then
	echo -n "# "
fi
echo "-4 -I DOCKER-USER -i $DOCKERI -p tcp -m tcp --dport 9000 -j ACCEPT"



# Modified on 2021-07-17, 2024-03-24, 2024-04-04

###########################################################################

